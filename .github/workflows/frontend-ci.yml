name: Frontend CI/CD

on:
  push:
    branches: [ "main", "develop", "feature/order" ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the code
      - name: Checkout repository
        uses: actions/checkout@v3

      # Step 2: Set up Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      # Step 3: Install dependencies and run tests inside shoptech
      - name: Install dependencies & Run tests
        run: |
          cd shoptech
          echo "Installing dependencies..."
          npm install
          if npm run | grep -q 'test'; then
            echo "Running tests..."
            npm test -- --watchAll=false
          else
            echo "No test script found, skipping tests."
          fi

      # Step 4: Log in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Step 5: Build and push Docker image
      - name: Build and push Docker image
        run: |
          IMAGE_NAME=${{ secrets.DOCKER_USERNAME }}/manhattan-frontend:${{ github.ref_name }}
          echo "Building Docker image $IMAGE_NAME..."
          docker build -t $IMAGE_NAME .
          echo "Pushing Docker image $IMAGE_NAME..."
          docker push $IMAGE_NAME

      # Step 6: Deploy to AWS via SSH
      - name: Deploy to AWS
        uses: appleboy/ssh-action@v0.1.8
        with:
          host: ${{ secrets.AWS_HOST }}
          username: ${{ secrets.AWS_USER }}
          key: ${{ secrets.AWS_KEY }}
          script: |
            IMAGE_NAME=${{ secrets.DOCKER_USERNAME }}/manhattan-frontend:${{ github.ref_name }}
            echo "Pulling Docker image $IMAGE_NAME..."
            docker pull $IMAGE_NAME
            echo "Stopping old container (if exists)..."
            docker stop frontend || true
            docker rm frontend || true
            echo "Running new container..."
            docker run -d --name frontend -p 80:80 $IMAGE_NAME
